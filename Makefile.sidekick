# GENERATED BY SIDEKICK - DO NOT EDIT

PROJECT_NAME = global-gh-tools

# SOURCE: https://github.com/devrev/sidekick/blob/main/internal/component/data/core
PROJECT_NAME ?=
ifeq ($(PROJECT_NAME),)
  $(error PROJECT_NAME variable not set)
endif
XDG_CACHE_DIR ?= $(HOME)/.cache
SIDEKICK_ROOT ?= $(XDG_CACHE_DIR)/sidekick
__sidekick_helper := $(lastword $(MAKEFILE_LIST))
ifeq ($(words $(MAKEFILE_LIST)),1)
  INTERNAL_OP := 1
endif
BUILD_DIR ?= _build
OS = $(shell uname -s)
ARCH = $(shell uname -m)
ifneq ($(findstring NT,$(OS)),)
  $(error Unsupported platform: Sidekick cannot run natively on Windows. Please use macOS, Linux, WSL, or a virtual machine running a supported OS)
endif
SHA1SUM = $(shell which sha1sum)
SHA256SUM = $(shell which sha256sum)
SHA512SUM = $(shell which sha512sum)
ifeq ($(OS),Darwin)
  SHA1SUM = $(shell which shasum) -a 1
  SHA256SUM = $(shell which shasum) -a 256
  SHA512SUM = $(shell which shasum) -a 512
endif
ifeq ($(SHA1SUM),)
  $(error sha1sum not found)
endif
ifeq ($(SHA256SUM),)
  $(error sha256sum not found)
endif
ifeq ($(SHA512SUM),)
  $(error sha512sum not found)
endif
GIT_SHA = $(shell git rev-parse HEAD)
__sidekick_sym = $(BUILD_DIR)/sidekick
GLOBAL_CACHE_DIR = $(__sidekick_sym)/cache
GLOBAL_TMP_DIR = $(__sidekick_sym)/tmp/global
TOOLS_DIR = $(__sidekick_sym)/tools
__project_cache_dir = $(__sidekick_sym)/projects/$(PROJECT_NAME)
__project_tmp_dir = $(__sidekick_sym)/tmp/projects/$(PROJECT_NAME)
CACHE_DIR = $(BUILD_DIR)/cache
TMP_DIR = $(BUILD_DIR)/tmp
$(SIDEKICK_ROOT) $(BUILD_DIR):
	mkdir -p $@
$(__sidekick_sym): | $(SIDEKICK_ROOT) $(BUILD_DIR)
	ln -sfn $(SIDEKICK_ROOT) $@
$(GLOBAL_CACHE_DIR) $(GLOBAL_TMP_DIR) $(TOOLS_DIR): | $(__sidekick_sym)
	mkdir -p $@
$(__project_cache_dir) $(__project_tmp_dir): | $(__sidekick_sym)
	mkdir -p $@
$(CACHE_DIR): | $(__project_cache_dir)
	ln -sfn $(realpath $(__project_cache_dir)) $@
$(TMP_DIR): | $(__project_tmp_dir)
	ln -sfn $(realpath $(__project_tmp_dir)) $@
$(__sidekick_helper): | \
  $(GLOBAL_CACHE_DIR) $(GLOBAL_TMP_DIR) $(TOOLS_DIR) $(CACHE_DIR) $(TMP_DIR)
.a.clean:
	rm -rf $(__project_cache_dir) $(__project_tmp_dir) $(BUILD_DIR)
.PHONY: .a.clean.local
.a.clean.tools:
	rm -rf $(TOOLS_DIR)
.PHONY: .a.clean.tools
.a.clean.cache:
	sudo rm -rf $(GLOBAL_CACHE_DIR)
.PHONY: .a.clean.cache
.a.nuke: .a.clean
	sudo rm -rf $(SIDEKICK_ROOT)
.PHONY: .a.nuke
.a.run:
	$(C)
.PHONY: .a.run
__text_color_red = \033[0;31m
__text_color_green = \033[0;32m
__text_normal = \033[0m
__text_bold = \033[1m

# SOURCE: https://github.com/devrev/sidekick/blob/main/internal/component/data/sidekick
SIDEKICK_VERSION ?= v3.30.0
ifeq ($(SIDEKICK_VERSION),)
  $(error SIDEKICK_VERSION variable not set)
endif
__sk_dir = $(TOOLS_DIR)/sidekick/$(SIDEKICK_VERSION)
__sk_bin = $(__sk_dir)/sidekick
__sk_kernel = $(shell uname -s | tr "[:upper:]" "[:lower:]")
__sk_arch = $(shell uname -m | sed -e 's/x86_64/amd64/')
__sk_asset = sidekick-$(__sk_kernel)-$(__sk_arch)
__sk_repo = devrev/sidekick
__sk_marker = $(__sk_dir)/marker.sidekick
SIDEKICK ?= $(realpath $(__sk_bin))
.a.sidekick.sync: SYNC_SOURCE = Makefile
.a.sidekick.sync: $(__sk_marker)
	$(SIDEKICK) sync $(PROJECT_NAME) $(SYNC_SOURCE) $(__sidekick_helper)
.PHONY: .a.sidekick.sync
.a.sidekick.update:
	git ls-remote --tags "https://github.com/$(__sk_repo)" \
	| cut -d/ -f3- \
	| sed -e "s/^v//" \
	| grep -v "[^0-9\.]" \
	| sort -t. -k 1,1n -k 2,2n -k 3,3n \
	| tail -n1 \
	| xargs -ITAG \
	    sed -i.bak -r -e 's/^SIDEKICK_VERSION .+/SIDEKICK_VERSION ?= vTAG/' \
	    $(__sidekick_helper)
	rm $(__sidekick_helper).bak
	$(MAKE) .a.sidekick.sync
.PHONY: .a.sidekick.update
$(__sk_marker): .d.gh
	rm -rf $(__sk_dir)
	mkdir -p $(__sk_dir)
	$(GH) release download \
	  --repo $(__sk_repo) \
	  --output $(__sk_bin)\
	  --pattern $(__sk_asset) \
	  $(SIDEKICK_VERSION)
	chmod a+x $(__sk_bin)
	touch $@

# SOURCE: https://github.com/devrev/sidekick/blob/main/internal/component/data/python
PYTHON_VERSION ?= 3.13.1
PYTHON_RELEASE ?= 20250115
PYTHON_ID = $(PYTHON_VERSION)-$(PYTHON_RELEASE)
PYTHON = $(realpath $(__python_dir)/bin/python3)
export PIP_CONFIG_FILE = $(realpath $(__python_pip_conf))
__python_dir = $(TOOLS_DIR)/python/$(PYTHON_VERSION)-$(PYTHON_RELEASE)
__python_kernel = $(shell uname -s | sed -e 's/Linux/-unknown-linux-gnu/' -e 's/Darwin/-apple-darwin/')
__python_arch = $(shell uname -m | sed -e 's/arm64/aarch64/' -e 's/amd64/x86_64_v3/')
__python_url = \
  https://github.com/indygreg/python-build-standalone/releases/download/$(PYTHON_RELEASE)/$\
  cpython-$(PYTHON_VERSION)+$(PYTHON_RELEASE)-$(__python_arch)$(__python_kernel)-install_only.tar.gz
__python_pip_conf = $(__python_dir)/pip.conf
__python_pip_cache = $(GLOBAL_CACHE_DIR)/python/pip
.d.python: $(__python_pip_conf)
.PHONY: .d.python
$(__python_pip_conf): | $(__python_pip_cache)
	rm -f $(GLOBAL_TMP_DIR)/python.tar.gz $(GLOBAL_TMP_DIR)/python.tar.gz.sha256
	curl -s -L -o $(GLOBAL_TMP_DIR)/python.tar.gz $(__python_url)
	curl -s -L -o $(GLOBAL_TMP_DIR)/python.tar.gz.sha256 $(__python_url).sha256
	cd $(GLOBAL_TMP_DIR) && ( echo $$( cat python.tar.gz.sha256 ) " python.tar.gz" ) | $(SHA256SUM) -c -
	rm -rf $(__python_dir)
	mkdir -p $(__python_dir)
	tar --strip-components 1 -xzf $(GLOBAL_TMP_DIR)/python.tar.gz -C $(__python_dir)
	rm -f $(GLOBAL_TMP_DIR)/python.tar.gz $(GLOBAL_TMP_DIR)/python.tar.gz.sha256
	echo "[global]" > $@
	echo "cache-dir = $(realpath $(__python_pip_cache))" >> $@
$(__python_pip_cache):
	mkdir -p $@

# SOURCE: https://github.com/devrev/sidekick/blob/main/internal/component/data/gh
GH_VERSION ?= v2.65.0
GH_VERSION_int ?= $(patsubst v%,%,$(GH_VERSION))
GH = $(realpath $(__gh_bin))
gh_token = GITHUB_ACCESS_TOKEN="$$(if [ -z "$$GITHUB_ACCESS_TOKEN" ]; then \
			$(GH) auth token; \
	else \
		echo $$GITHUB_ACCESS_TOKEN; \
	fi)"
gh_token_plain = if [ -z "$$GITHUB_ACCESS_TOKEN" ]; then \
			$(GH) auth token; \
	else \
		echo $$GITHUB_ACCESS_TOKEN; \
	fi
gh_login = if ! $(GH) auth status 2> /dev/null && [ -z "$$GITHUB_ACCESS_TOKEN" ]; then \
		echo "Log in to GitHub CLI (command: make .a.run C='\$$(GH) auth login')"; \
		exit 1; \
	fi
__gh_dir = $(TOOLS_DIR)/gh/$(GH_VERSION)
__gh_bin = $(__gh_dir)/bin/gh
__gh_kernel = $(shell uname -s | tr "[:upper:]" "[:lower:]")
__gh_arch = $(shell uname -m | sed -e 's/x86_64/amd64/')
ifeq ($(__gh_kernel),darwin)
  __gh_file = gh_$(GH_VERSION_int)_macOS_$(__gh_arch).zip
else
  __gh_file = gh_$(GH_VERSION_int)_$(__gh_kernel)_$(__gh_arch).tar.gz
endif
__gh_base_url = https://github.com/cli/cli/releases/download/$(GH_VERSION)
__gh_bin_url = $(__gh_base_url)/$(__gh_file)
.d.gh: $(__gh_bin)
.PHONY: .d.gh
$(__gh_bin):
	echo "Installing GitHub CLI (gh)..."
	rm -f $(GLOBAL_TMP_DIR)/$(__gh_file)
	curl -v -L -o $(GLOBAL_TMP_DIR)/$(__gh_file) $(__gh_bin_url)
	rm -rf $(__gh_dir)
	echo "Extracting GitHub CLI (gh)..."
	mkdir -p $(__gh_dir)
	if [ "$(__gh_kernel)" = "darwin" ]; then \
		unzip -q $(GLOBAL_TMP_DIR)/$(__gh_file) -d $(__gh_dir); \
		mv $(__gh_dir)/gh_*/* $(__gh_dir); \
	else \
		tar -xzf $(GLOBAL_TMP_DIR)/$(__gh_file) -C $(__gh_dir); \
		mv $(__gh_dir)/gh_$(GH_VERSION_int)_$(__gh_kernel)_$(__gh_arch)/* $(__gh_dir); \
	fi
	chmod +x $(__gh_bin)
	echo "GitHub CLI (gh) installed successfully."
	rm $(GLOBAL_TMP_DIR)/$(__gh_file)
	touch $@
